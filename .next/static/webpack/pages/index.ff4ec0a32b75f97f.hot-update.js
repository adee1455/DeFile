"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/hooks/useIpfsAndEthereum.js":
/*!*****************************************!*\
  !*** ./src/hooks/useIpfsAndEthereum.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\n// import { useState } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// const useIpfsAndEthereum = () => {\n//   const [provider, setProvider] = useState(null);\n//   const [signer, setSigner] = useState(null);\n//   const [contract, setContract] = useState(null);\n//   const connectWallet = async () => {\n//     try {\n//       if (typeof window.ethereum !== 'undefined') {\n//         console.log('Ethereum wallet detected');\n//         await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         console.log('Ethereum accounts requested');\n//         const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = web3Provider.getSigner();\n//         setProvider(web3Provider);\n//         setSigner(signer);\n//         console.log('Provider and signer set');\n//         const contractAddress = process.env.NEXT_PUBLIC_EXAM_PAPER_MANAGEMENT_CONTRACT_ADDRESS;\n//         const contractABI = JSON.parse(process.env.NEXT_PUBLIC_EXAM_PAPER_MANAGEMENT_CONTRACT_ABI);\n//         if (!contractAddress || !contractABI) {\n//           throw new Error('Contract address or ABI not provided in environment variables.');\n//         }\n//         console.log('Contract address and ABI retrieved');\n//         const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//         console.log('Contract initialized:', contract);\n//         setContract(contract);\n//       } else {\n//         alert('Please install MetaMask or another Ethereum wallet provider to use this feature');\n//       }\n//     } catch (error) {\n//       console.error('Error connecting wallet:', error);\n//       alert('Failed to connect wallet. See console for details.');\n//     }\n//   };\n//   const uploadFileToIPFS = async (file) => {\n//     try {\n//       const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n//       const formData = new FormData();\n//       formData.append('file', file);\n//       const response = await axios.post(url, formData, {\n//         maxContentLength: 'Infinity',\n//         headers: {\n//           'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\n//           'pinata_api_key': process.env.NEXT_PUBLIC_PINATA_API_KEY,\n//           'pinata_secret_api_key': process.env.NEXT_PUBLIC_PINATA_SECRET_API_KEY,\n//         },\n//       });\n//       console.log(response.data.IpfsHash);\n//       return response.data.IpfsHash;\n//     } catch (error) {\n//       console.error('Error uploading file to IPFS:', error);\n//       alert('Failed to upload file to IPFS');\n//       return null;\n//     }\n//   };\n//   const createPaper = async (paperId, ipfsHash, unlockTime, authorizedUsers) => {\n//     try {\n//       if (!contract) {\n//         alert('2FA - Click on the submit button again to Confirm :)');\n//         return;\n//       }\n//       const transaction = await contract.createPaper(paperId, ipfsHash, unlockTime, authorizedUsers);\n//       await transaction.wait();\n//       alert('Paper created successfully!');\n//     } catch (error) {\n//       console.error('Error creating paper:', error);\n//       alert('File with same name already exist, Please Rename the file and try again.');\n//     }\n//   };\n//   return { connectWallet, uploadFileToIPFS, createPaper };\n// };\n// export default useIpfsAndEthereum;\n// import { useState } from 'react';\n// import { ethers } from 'ethers';\n// import axios from 'axios';\n// const useIpfsAndEthereum = () => {\n//     const [provider, setProvider] = useState(null);\n//     const [signer, setSigner] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const connectWallet = async () => {\n//         try {\n//             if (typeof window.ethereum !== 'undefined') {\n//                 console.log('Ethereum wallet detected');\n//                 await window.ethereum.request({ method: 'eth_requestAccounts' });\n//                 console.log('Ethereum accounts requested');\n//                 const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n//                 const signer = web3Provider.getSigner();\n//                 setProvider(web3Provider);\n//                 setSigner(signer);\n//                 console.log('Provider and signer set');\n//                 const contractAddress = process.env.NEXT_PUBLIC_EXAM_PAPER_MANAGEMENT_CONTRACT_ADDRESS;\n//                 const contractABI = JSON.parse(process.env.NEXT_PUBLIC_EXAM_PAPER_MANAGEMENT_CONTRACT_ABI);\n//                 if (!contractAddress || !contractABI) {\n//                     throw new Error('Contract address or ABI not provided in environment variables.');\n//                 }\n//                 console.log('Contract address and ABI retrieved');\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//                 console.log('Contract initialized:', contract);\n//                 setContract(contract);\n//             } else {\n//                 alert('Please install MetaMask or another Ethereum wallet provider to use this feature');\n//             }\n//         } catch (error) {\n//             console.error('Error connecting wallet:', error);\n//             alert('Failed to connect wallet. See console for details.');\n//         }\n//     };\n//     const uploadFileToIPFS = async (file) => {\n//         try {\n//             const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n//             const formData = new FormData();\n//             formData.append('file', file);\n//             const response = await axios.post(url, formData, {\n//                 maxContentLength: 'Infinity',\n//                 headers: {\n//                     'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,\n//                     'pinata_api_key': process.env.NEXT_PUBLIC_PINATA_API_KEY,\n//                     'pinata_secret_api_key': process.env.NEXT_PUBLIC_PINATA_SECRET_API_KEY,\n//                 },\n//             });\n//             console.log(response.data.IpfsHash);\n//             return response.data.IpfsHash;\n//         } catch (error) {\n//             console.error('Error uploading file to IPFS:', error);\n//             alert('Failed to upload file to IPFS');\n//             return null;\n//         }\n//     };\n//     const createPaper = async (paperId, ipfsHash, unlockTime, authorizedUsers) => {\n//         try {\n//             if (!contract) {\n//                 alert('2FA - Click on the submit button again to Confirm :)');\n//                 return;\n//             }\n//             const transaction = await contract.createPaper(paperId, ipfsHash, unlockTime, authorizedUsers);\n//             await transaction.wait();\n//             alert('Paper created successfully!');\n//         } catch (error) {\n//             console.error('Error creating paper:', error);\n//             alert('File with same name already exists. Please rename the file and try again.');\n//         }\n//     };\n//     const unlockPaper = async (paperId, signer) => {\n//         try {\n//             if (!contract) {\n//                 alert('Click on Unlock again to Confirm :)');\n//                 return;\n//             }\n//             const transaction = await contract.unlockPaper(paperId);\n//             await transaction.wait();\n//         } catch (error) {\n//             console.error('Error unlocking paper:', error);\n//             throw new Error('Failed to unlock paper');\n//         }\n//     };\n//     const getPaperDetails = async (paperId) => {\n//         try {\n//             if (!contract) {\n//                 throw new Error('Contract not initialized');\n//             }\n//             const ipfsHash = await contract.getIpfsHash(paperId);\n//             return { ipfsHash };\n//         } catch (error) {\n//             console.error('Error fetching paper details:', error);\n//             throw new Error('Failed to fetch paper details');\n//         }\n//     };\n//     return { connectWallet, uploadFileToIPFS, createPaper, unlockPaper, getPaperDetails };\n// };\n// export default useIpfsAndEthereum;\n/* __next_internal_client_entry_do_not_use__ default auto */ var _s = $RefreshSig$();\n\n\n\nconst useIpfsAndEthereum = ()=>{\n    _s();\n    const [provider, setProvider] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [signer, setSigner] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [account, setAccount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contract, setContract] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true); // Add loading state\n    const initContract = async ()=>{\n        try {\n            if (typeof window.ethereum !== \"undefined\") {\n                const web3Provider = new ethers__WEBPACK_IMPORTED_MODULE_2__.Web3Provider(window.ethereum);\n                const signer = web3Provider.getSigner();\n                setProvider(web3Provider);\n                setSigner(signer);\n                const contractAddress = \"0xEc27765B91Fbcb358cd2FFe0524E4a452B77E566\";\n                const contractABI = JSON.parse(\"[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newAdmin\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"addAdmin\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"ipfsHash\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"unlockTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"authorizedUsers\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"createPaper\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_ipfsStorageAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"creator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PaperCreated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PaperUnlocked\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"admin\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"removeAdmin\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"unlockPaper\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"examPapers\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"creator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"ipfsCID\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"unlockTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"isLocked\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getIpfsHash\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ipfsStorage\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IPFSStorage\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isAdmin\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\");\n                if (!contractAddress || !contractABI) {\n                    throw new Error(\"Contract address or ABI not provided in environment variables.\");\n                }\n                const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(contractAddress, contractABI, signer);\n                setContract(contract);\n                console.log(\"Contract initialized:\", contract);\n                const accounts = await web3Provider.listAccounts();\n                if (accounts.length > 0) {\n                    setAccount(accounts[0]);\n                }\n            } else {\n                alert(\"Please install MetaMask or another Ethereum wallet provider to use this feature\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing contract:\", error);\n            alert(\"Failed to initialize contract. See console for details.\");\n        } finally{\n            setLoading(false); // Set loading to false once initialization is complete\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        initContract();\n    }, []);\n    const connectWallet = async ()=>{\n        if (window.ethereum) {\n            try {\n                console.log(\"Attempting to connect to wallet...\");\n                const web3Provider = new ethers__WEBPACK_IMPORTED_MODULE_2__.Web3Provider(window.ethereum);\n                await web3Provider.send(\"eth_requestAccounts\", []);\n                const signer = web3Provider.getSigner();\n                const account = await signer.getAddress();\n                setProvider(web3Provider);\n                setSigner(signer);\n                setAccount(account);\n                const contractAddress = \"0xEc27765B91Fbcb358cd2FFe0524E4a452B77E566\";\n                const contractABI = JSON.parse(\"[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newAdmin\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"addAdmin\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"ipfsHash\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"unlockTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"authorizedUsers\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"createPaper\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_ipfsStorageAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"creator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PaperCreated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PaperUnlocked\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"admin\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"removeAdmin\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"unlockPaper\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"examPapers\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"creator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"ipfsCID\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"unlockTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"isLocked\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"paperId\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getIpfsHash\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ipfsStorage\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IPFSStorage\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isAdmin\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\");\n                if (!contractAddress || !contractABI) {\n                    throw new Error(\"Contract address or ABI not provided in environment variables.\");\n                }\n                const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(contractAddress, contractABI, signer);\n                setContract(contract);\n                console.log(\"Wallet connected:\", account);\n                console.log(\"Contract connected:\", contract);\n            } catch (error) {\n                console.error(\"Error connecting to wallet:\", error);\n                alert(\"Failed to connect to wallet. See console for details.\");\n            }\n        } else {\n            console.error(\"No Ethereum provider found. Install MetaMask.\");\n            alert(\"Please install MetaMask or another Ethereum wallet provider to use this feature\");\n        }\n    };\n    const uploadFileToIPFS = async (file)=>{\n        try {\n            const url = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_1___default().post(url, formData, {\n                maxContentLength: \"Infinity\",\n                headers: {\n                    \"Content-Type\": \"multipart/form-data; boundary=\".concat(formData._boundary),\n                    \"pinata_api_key\": \"87ce19d971210d993216\",\n                    \"pinata_secret_api_key\": \"e5c4ba7ee48aa829bb10fbf8d6affef8ce7c97a3cb21a24662adab1da292fa4a\"\n                }\n            });\n            console.log(response.data.IpfsHash);\n            return response.data.IpfsHash;\n        } catch (error) {\n            console.error(\"Error uploading file to IPFS:\", error);\n            alert(\"Failed to upload file to IPFS\");\n            return null;\n        }\n    };\n    const createPaper = async (paperId, ipfsHash, unlockTime, authorizedUsers)=>{\n        if (!contract) {\n            alert(\"Contract not initialized. Please reload the page or reconnect your wallet.\");\n            return;\n        }\n        try {\n            const transaction = await contract.createPaper(paperId, ipfsHash, unlockTime, authorizedUsers);\n            await transaction.wait();\n            alert(\"Paper created successfully!\");\n        } catch (error) {\n            console.error(\"Error creating paper:\", error);\n            alert(\"Failed to create paper\");\n        }\n    };\n    return {\n        connectWallet,\n        connectWallet: ()=>{},\n        uploadFileToIPFS,\n        createPaper,\n        contract,\n        loading,\n        account\n    };\n};\n_s(useIpfsAndEthereum, \"oDnJnjVLtE3pxhnkndK7PpH3bjg=\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (useIpfsAndEthereum);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/hooks/useIpfsAndEthereum.js\n"));

/***/ })

});